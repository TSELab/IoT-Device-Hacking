import os, re
from enum import Enum
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import pydot
from networkx.drawing.nx_pydot import graphviz_layout

class FileTypes(Enum):
	UNKNOWN = -1
	FILE = 0
	DIR = 1
	LINK = 2

class NodeColors(Enum):
	UNTRACKED = "#ff834d"
	RESERVED = "#ffe859"
	LINK = "#ff40d6"
	CHANGED = "#26ffe5"
	TRACKED = "#8876ff"

class DirFile:
	def __init__(self, fname, ftype):
		self.packageName = ""
		self.name = fname
		self.fileType = ftype
		self.changed = False
		i = len(self.name) - 1
		while self.name[i] != "/":
			i -= 1
		self.baseName = self.name[i + 1:]
	def __str__(self):
		return f"{self.name}: {self.fileType}, Package {self.packageName}"
	def __repr__(self):
		return self.__str__()
	def searchPath(self, path):
		if str(path) == str(self.name):
			return self
		return None
	def setPkg(self, pkgName):
		self.packageName = pkgName
	def Name(self):
		return self.name
	def PackageName(self):
		return self.packageName
	def FileType(self):
		return self.fileType
	def BaseName(self):
		i = 10
		retStr = self.baseName
		while i < len(self.name):
			retStr = retStr[0 : i] + "\n" + retStr[i : ]
			i += 11
		return retStr
	def findMissing(self):
		if self.PackageName() == "" and self.fileType != FileTypes.DIR:
			print(f"Untracked file {self.Name()}")
	def isChanged(self):
		return self.changed
	def setChanged(self):
		self.changed = True

class DirLinks(DirFile):
	def __init__(self, fname, ftype):
		super().__init__(fname, ftype)
		self.linkPath = os.readlink(self.name)
	def findLink(self, root):
		self.linkDest = root.searchPath(self.linkPath)
		if self.linkDest == None:
			print(f"Cannot find link destination for {self.name}")
	def searchPath(self, path):
		if super().searchPath(path):
			return self
		if self.linkDest == None:
			return None
		return self.linkDest.searchPath(path.replace(self.name, self.linkPath))
	def drawLinks(self, G):
		if self.linkDest:
			G.add_edge(self.Name(), self.linkDest.Name())

class DirTree(DirFile):
	def __init__(self, fname, ftype):
		self.subDirs = []
		self.subfiles = []
		self.sublinks = []
		super().__init__(fname, ftype)
		for files in os.listdir(fname):
			if os.path.islink(f"{fname}/{files}"):
				self.sublinks.append(DirLinks(f"{fname}/{files}", FileTypes.LINK))
			elif os.path.isdir(f"{fname}/{files}"):
				self.subDirs.append(DirTree(f"{fname}/{files}", FileTypes.DIR))
			elif os.path.isfile(f"{fname}/{files}"):
				self.subfiles.append(DirFile(f"{fname}/{files}", FileTypes.FILE))
			else:
				self.subfiles.append(DirFile(f"{fname}/{files}", FileTypes.UNKNOWN))
	def searchPath(self, path):
		if super().searchPath(path):
			return self
		for childFile in self.subDirs + self.subfiles + self.sublinks:
			pattern = re.compile(childFile.Name())
			if pattern.match(path):
				return childFile.searchPath(path)
		return None
	def findLink(self, root):
		for links in self.sublinks + self.subDirs:
			links.findLink(root)
	def subFiles(self):
		return self.subDirs + self.subfiles + self.sublinks
	def findMissing(self):
		super().findMissing()
		for childFiles in self.subFiles():
			childFiles.findMissing()
	def fillGraph(self, G, baseNameDict, nodeColors):
		for childFiles in self.subFiles():
			G.add_node(childFiles.Name())
			G.add_edge(self.Name(), childFiles.Name())

			baseNameDict[childFiles.Name()] = childFiles.BaseName()
			if childFiles.FileType() == FileTypes.LINK:
				nodeColors.append(NodeColors.LINK.value)
			elif childFiles.isChanged():
				nodeColors.append(NodeColors.CHANGED.value)
			elif childFiles.PackageName() != "":
				nodeColors.append(NodeColors.TRACKED.value)
			else:
				nodeColors.append(NodeColors.UNTRACKED.value)
		for childDirs in self.subDirs:
			childDirs.fillGraph(G, baseNameDict, nodeColors)
	def drawLinks(self, G):
		for ln in self.sublinks + self.subDirs:
			ln.drawLinks(G)

# log file format (generated by pbom.sh):
# @Package name
# file path
# file path...
def tagPackage(logFile, rootdir):
	pkgName = ""
	with open(logFile, "r") as logStream:
		for lines in logStream.readlines():
			lines = lines.strip("\n")
			if lines[0] == "@":
				pkgName = lines[1:]
			else:
				targetFile = rootdir.searchPath("." + lines)
				if targetFile == None:
					print(f"File .{lines} for package {pkgName} not found") # Missing pkg
					continue
				if targetFile.PackageName() != "":
					print(f"{targetFile.Name()} already claimed by package {targetFile.PackageName()}, overriding to {pkgName}")
				if targetFile.FileType() == FileTypes.LINK:
					targetFile.linkDest.setPkg(pkgName)
				targetFile.setPkg(pkgName)

root = DirTree("./PhilipsHueBridge", FileTypes.DIR)
root.findLink(root)
tagPackage("./testBom.txt", root)
root.findMissing()

plt.rcParams["figure.figsize"] = (20, 10)
G = nx.Graph()
G.add_node(root.Name())
baseNameDict = {root.Name() : root.BaseName()}
nodeColors = [NodeColors.UNTRACKED.value]
root.fillGraph(G, baseNameDict, nodeColors)
graphLayout = graphviz_layout(G, prog="dot")
root.drawLinks(G)
nx.draw_networkx(G, graphLayout, with_labels = False, node_color = nodeColors, node_size = 1000, node_shape = "o")
nx.draw_networkx_labels(G, graphLayout, labels = baseNameDict, verticalalignment = "top")

legend_elems = [Line2D([0], [0], color = "w", markerfacecolor = NodeColors.UNTRACKED.value, marker = "o", label = "Untracked File", markersize = 12),
		Line2D([0], [0], color = "w", markerfacecolor = NodeColors.TRACKED.value, marker = "o", label = "Tracked File", markersize = 12),
		Line2D([0], [0], color = "w", markerfacecolor = NodeColors.LINK.value, marker = "o", label = "Links", markersize = 12),
		Line2D([0], [0], color = "w", markerfacecolor = NodeColors.CHANGED.value, marker = "o", label = "Changed Since Last Version", markersize = 12)]
plt.legend(handles = legend_elems)
plt.savefig("image.png", dpi = 220)
